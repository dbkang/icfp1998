#ifdef SERIAL
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <assert.h>
#include "serial.h"
#else
#include <cilk.h>
#include <cilk-compat.h>
#endif

#include <stdio.h>
#include <string.h>
#include <sys/time.h>
#include <sys/resource.h>

#include "globals.h"
#include "eval.h"
#include "rtab.h"


int   bestmove;
int   nodec[32]; /* array of nodec, one per processor */
int   timeout;
int   global_abort_flag;
int   search_done;
u64   start_wall_time;

/*
 * made mallocatable because Cilk fills static arrays with zeros in
 * the binary --- Matteo
 */
position *game;
transposition *tt;

/* hash table for moves given on input */
struct repeat_hash_entry {
     u64     key;
     struct repeat_hash_entry *next;
};
     
struct repeat_hash_entry *repeat_hash_table[REPEAT_HASH_SIZE];


#ifndef SUBMISSION
#define INFO(a) fprintf a
#else
#define INFO(a)
#endif

/***** PROTOTYPES *******/

void timeout_handler( int signum );
int make_move( position *old, position *new, int move );
void display( FILE *pout, position *pos );
int  push_move_test( position *p, int move );
int  init_open( position *p );
cilk int  root_search( position cur, int depth );
cilk int  search( position *prev, int depth, int update_move );
position * read_moves( position *p );
int notate( char *s, int mv );
double  seconds();
void  init_hash_table();
u64 new_wall_time();
static int lookup_repeat_hash(u64 key);

/* function prototypes */
void  put_hash_entry( 
  position *p,
  int depth, 
  int alpha, 
  int beta, 
  int score, 
  int bestmove, 
  int use_score 
);

int  get_hash_entry( 
  position *p,
  int depth, 
  int alpha, 
  int beta, 
  int *bestmove,
  int *score
 );

void parse_command_line(int argc, char *argv[])
{
     int c;

     timeout = 27;
     while ((c = getopt(argc, argv, "t:")) != -1) {
	  switch (c) {
	      case 't':
		   timeout = atoi(optarg);
		   break;
	  }
     }
}

cilk void timer_thread(void)
{
     for (;;) {
	  if (new_wall_time() >= (u64) timeout * 1000 + start_wall_time) {
	       global_abort_flag = 1;
	       return;
	  }
	  if (search_done) return;
	  usleep(20000);
     }
}


void timeout_handler( int signum )
{
  global_abort_flag = 1;
}


/* Reply Table: fields are: [move][color][reply_num]  */
/* Each proc can have its own table */
/* By default Cilk initializes all entries to 0. */
private int reply_table[BD_SIZE*4][2][2] = {0};

cilk int main(int argc, char *argv[]) 
{
     int   depth, i;
     double starttime;
     position *opening;
     char    buf[8];
     char    ctms[8];

     inlet int stop_timer(int score) {
 	  search_done = 1;
 	  return score;
     }
 

     start_wall_time = new_wall_time();
     parse_command_line(argc, argv);
 
#ifndef SERIAL
     if (Cilk_active_size < 2) 
 	  Cilk_die("This program requires at least -nproc 2 for time control\n");
#else
     signal( SIGALRM, timeout_handler );
     alarm( timeout );
#endif
 

     game = malloc(MAX_GAME_LENGTH * sizeof(position));
     if (!game) {
	  fprintf(stderr, "Can't malloc game array\n");
	  Cilk_exit(1);
     }

     tt = malloc(TT_SIZE * sizeof(transposition));
     if (!tt) {
	  fprintf(stderr, "Can't malloc tt array\n");
	  Cilk_exit(1);
     }

     for (i = 0; i < REPEAT_HASH_SIZE; ++i)
	  repeat_hash_table[i] = (struct repeat_hash_entry *)0;

     if (!repeat_hash_table) {
	  fprintf(stderr, "Can't malloc repeat_hash_table array\n");
	  Cilk_exit(1);
     }

     opening = game; 
     eval_init(); 
     init_open( opening );

     init_hash_table();

     opening = read_moves(opening); 

     starttime=seconds();


     if (CTM(opening)==X) 
	  strcpy( ctms, "X" ); 
     else 
	  strcpy( ctms, "O" );

     INFO((stderr, "\nDEPTH   TIME  SCORE stable MOVE   NODECOUNT    %s to move\n", ctms));
     INFO((stderr,   "----- ------ ------ ------ ------ --------- \n"));

     for (i = 0; i < Cilk_active_size; ++i)
	  nodec[i]=0;

     /* write a random move in buf, just in case we timeout at depth 1 */
     notate(buf, 0); 

     for (depth=1; depth<=MAX_DEPTH; depth++)
     {
	  int     score;
	  int     last_score;
	  char    stable[16];
	  double  tt;
	  int nc;
 	  global_abort_flag = 0;
 	  search_done = 0;
#ifndef SERIAL
 	  spawn timer_thread();
#endif
 	  score = stop_timer(spawn root_search( *opening, depth ));
	  sync;
 	  if (global_abort_flag) 
	    break;
	  if (depth==1) 
	    strcpy(stable, "    --"); 
	  else
	    sprintf( stable, "%6d", (last_score+score)/2 );
	  last_score = score;
	  tt = seconds() - starttime;
	  notate( buf, bestmove );

	  nc = 0;
	  for (i = 0; i < Cilk_active_size; ++i)
	       nc += nodec[i];

	  INFO(( stderr, 
		   "%5d%7.1f %6d %s   %s%12d\n", 
		   depth, 
		   tt, 
		   score, 
		   stable, 
		   buf, 
		   nc ));

	  if ( abs(score) >= MATE ) break;
     } 

     INFO(( stderr, "\n"));
     printf("%s\n", buf );

     
     return(0);
} 



/* Main part of making a move, all updates to state */
#define UPD_STATE(p, r, c, oldval, newval)    \
{                                             \
   oldval = READ_BD(p,r,c);                   \
   if (oldval != newval)                      \
   {                                          \
      p->nrank[r][oldval]--;                  \
      p->nrank[r][newval]++;                  \
      p->nfile[c][oldval]--;                  \
      p->nfile[c][newval]++;                  \
      p->npc[oldval]--;                       \
      p->npc[newval]++;                       \
      p->ctr_pts[oldval] -= CenterTable[r][c]; \
      p->ctr_pts[newval] += CenterTable[r][c]; \
      p->key ^= ran_tab[oldval][r][c] ^ ran_tab[newval][r][c]; \
      SET_BD(p,r,c,newval);                   \
   }                                          \
   newval = oldval;                           \
}


#ifdef CODE_CHECK
int  cmp_boards( position *a, position *b)
{
  int   i, j;
     
  for (i=0; i<BD_SIZE; i++)
  for (j=0; j<BD_SIZE; j++)
  {
    if ( READ_BD(a,i,j) != READ_BD(b,i,j) ) return 1;
  }
  
  return 0;
}
#endif



   

int make_move( position *old, position *new, int move ) 
{
  int dir, pos, hold, temp; 
  int r, c;

  /* Copy board, update ply */
  *new = *old;
  new->ply_of_game++;

  /* propogate pointers to old states */
  new->his[0] = old;
  new->his[1] = old->his[0];

  /* Whose move? */ 
  hold = CTM(old);

  /* Crack move, get row/col and direction */ 
  dir = move & 3; 
  pos = move >> 2;

  /* Push pieces, depends on direction */
  switch (dir)
    { 
    case L:
      for (r = pos, c = 0; c < BD_SIZE && hold; c++) 
	UPD_STATE(new, r, c, temp, hold);
      break; 

    case R:
      for (r = pos, c = BD_SIZE - 1; c >= 0 && hold; c--)
	UPD_STATE(new, r, c, temp, hold);
      break;

    case T:
      for (r = 0, c = pos; r < BD_SIZE && hold; r++)
	UPD_STATE(new, r, c, temp, hold);
      break;

    case B: 
      for (r = BD_SIZE - 1, c = pos; r >= 0 && hold; r--)
	UPD_STATE(new, r, c, temp, hold);
      break;

    default: break;
    } 

  return (hold);
}



void display( FILE *pout, position* pos )
{
     int r, c;
     char disp_ch[ 4 ] = ".OX";

     fprintf(pout, "  ");
     for (c = 0; c < BD_SIZE; ++c)
	  fprintf(pout, " %2d", c + 1);
     fprintf(pout, "\n");

     for (r = 0; r < BD_SIZE; ++r, fprintf( pout, "\n" )) {
	  fprintf(pout, "%2d ", r + 1);
	  for (c = 0; c < BD_SIZE; ++c)
	       fprintf(pout, " %c ", disp_ch[ READ_BD(pos, r, c) ]); 
     }

     fprintf(pout, "\n");
     fflush(pout);
}



/* Determine how much the score will change after a move is made.
 *  0 - Player's own piece is pushed off the edge.
 *  1 - No pieces are pushed off.
 *  2 - Opponent's piece is pushed off.
 */
inline int push_move_test( position *p, int move )
{
  int dir, pos, who;

  /* Crack move, get row/col and direction */ 
  dir = move & 3; 
  pos = move >> 2;
  who = CTM(p);

  switch (dir)
    {
    case L:
      return (CNT_RANK(p,pos) == BD_SIZE) 
	? (READ_BD(p,pos,BD_SIZE-1) == who) ? 0 : 2
	: 1;
    case R:
      return (CNT_RANK(p,pos) == BD_SIZE) 
	? (READ_BD(p,pos,0) == who) ? 0 : 2
	: 1;
    case T:
      return (CNT_FILE(p,pos) == BD_SIZE) 
	? (READ_BD(p,BD_SIZE-1,pos) == who) ? 0 : 2
	: 1;
    case B:
      return (CNT_FILE(p,pos) == BD_SIZE) 
	? (READ_BD(p,0,pos) == who) ? 0 : 2
	: 1;
    default: return -1;
    }
}


cilk int  root_search( position cur, int depth )
{
     int          bestscore = -INF;
     int          mv;
     int          sc;
     static int   prev_move=0;   /* best move from last iteration */
     int aborted = 0;

     inlet void catch(int ret_sc, int ret_mv) {
	  ret_sc = -ret_sc;

	  if (ret_sc > bestscore)
	  { 
	       bestscore = ret_sc;
	       bestmove = ret_mv;
       
	       if (ret_sc >= cur.beta) {
		    aborted = 1;
		    abort; 
	       }
	       if (ret_sc > cur.alpha) cur.alpha = ret_sc;
	  }
     }
	  
     cur.alpha = -INF;
     cur.beta = INF; 


     /* search best move from previous iteration first */
     sc = spawn search( &cur, depth-1, prev_move );
     sync;
     sc = -sc;
     if (sc > bestscore)
     { 
	  bestscore = sc;
	  bestmove = prev_move;
	  if (sc > cur.alpha) cur.alpha = sc;
     }


     /* cycle through all the moves */
     for (mv=0; mv<BD_SIZE*4; mv++)
     {
	  if (mv == prev_move) continue;   
	  catch(spawn search( &cur, depth-1, mv ), mv );
	  if (aborted) break;
     }
     sync;

     prev_move = bestmove;
     return( bestscore );
}




cilk int search( position *prev, int depth, int update_move )
{
    position   cur;
    int        bestscore = -INF;
    int        x; 
    int        mv; 
    int        sc; 
    position   *rep;
    int        local_best_move = INF;
    int        old_alpha;
    int        ht_move;
    int        cutoff = 0;
    int        use_hash = 0;
    int        aborted = 0;
    int saw_rep=0;

    int *reply_inf=reply_table[update_move][CTM(prev)>>1];
    int reply_move0,reply_move1;



    inlet void catch(int ret_sc, int ret_mv) {
	 ret_sc = -ret_sc;

	 if (ret_sc > bestscore)
	 { 
	      bestscore = ret_sc;
	      local_best_move = ret_mv;
	      if (ret_sc >= cur.beta) {

		if (reply_inf[0]!=ret_mv){
		reply_inf[1]=reply_inf[0];
		reply_inf[0]=ret_mv;
		}
		   aborted = 1;
		   abort; 
	      }

	      if (ret_sc > cur.alpha) cur.alpha = ret_sc;

	      if (ret_sc==-REPWIN) saw_rep=1;
	 } 
    }

    if (global_abort_flag) return 0;

    x = make_move( prev, &cur, update_move );

    nodec[Self]++;

    reply_move0=reply_inf[0];
    reply_move1=reply_inf[1];
    /* Make sure reply_move is valid.
     * This should not be necessary, but I'm being paranoid.
     */
    if ((reply_move0>=BD_SIZE*4)||(reply_move0<0))
      reply_move0=0;
    if ((reply_move1>=BD_SIZE*4)||(reply_move1<0))
      reply_move1=0;
    
    old_alpha = cur.alpha;

#if HASH
    if (x == 0) use_hash=1;
#endif

    /* repeat mate test */
    if (lookup_repeat_hash(cur.key))
	   return(REPWIN); 

    for (rep=cur.his[1]; rep; rep = rep->his[1])   {
      if (rep->npc[MT] != cur.npc[MT]) break;

#ifdef CODE_CHECK	  
      CILK_ASSERT( (cmp_boards( rep, &cur)==0) == (rep->key==cur.key) );
#endif
 
      if (rep->key == cur.key) 
	   return(REPWIN); 
    }


#if HASH
    if (
	 get_hash_entry( &cur, 
			 depth, 
			 cur.alpha, 
			 cur.beta, 
			 &ht_move, 
			 &sc)
	 ) 
	 {
	   if ((use_hash) ||

	      /* If we found a position that wins by making an irreversible
	       * move, then it's a winning postion no matter how we got here.  
	       */
	      ((sc>cur.beta)&&(push_move_test(&cur,ht_move)==1)) ||
	      /* If we found a losing position, then if the depth=1,
	       * potential repeats can not save us, Sso it's still losing.
	       */
	      ((sc<cur.alpha)&&(depth==1))
	      )
	   {
	     return(sc);
	   }
	 }
#else
    ht_move = 0; 
#endif


    CILK_ASSERT (ht_move==INF || (ht_move >= 0 && ht_move < BD_SIZE*4) );

    sc = eval(&cur);
    if (abs(sc)>=MATE  || depth <= 0) 
    {
      return( sc );
    }

    cur.alpha = -prev->beta;
    cur.beta = -prev->alpha;


    /* try best move first */

    if (!cutoff)
    {
      if (ht_move==INF) ht_move = reply_move0;
      sc = spawn search( &cur, depth-1, ht_move );
      sync;
      sc = -sc;
      if (sc > bestscore)
      { 
	bestscore = sc;
	local_best_move = ht_move;
	if (sc > cur.alpha) cur.alpha = sc;
	if (sc==-REPWIN) saw_rep=1;
	if (sc >= cur.beta) {
	  cutoff = 1;

		if (reply_inf[0]!=ht_move){
		reply_inf[1]=reply_inf[0];
		reply_inf[0]=ht_move;
		}
	}

      } 
    }

    /* cycle through all the moves */

    if (!cutoff){

      if (reply_move0 != ht_move){
	catch(spawn search( &cur, depth-1, reply_move0), reply_move0 );
      }

      if (!aborted) 
      if (reply_move1 != ht_move){
	catch(spawn search( &cur, depth-1, reply_move1), reply_move1 );
      }

      if (!aborted) 
      for (mv=0; mv<BD_SIZE*4; mv++)
	{ 
	  if (mv==ht_move) continue;  /* don't try this again */
	  if (mv==reply_move0) continue;  /* don't try this again */
	  if (mv==reply_move1) continue;  /* don't try this again */
	  catch(spawn search( &cur, depth-1, mv), mv );
	  if (aborted) break;
	} 
    }
    sync;

#if HASH


    if(
       /* If its a losing position at depth 1, and we're not losing
	* because of a possible rep, then it's a losing postion no
	* matter how we got here.
	*/
       ((sc<cur.alpha)&&(depth==1)&&(!saw_rep)) ||

       /* If its a wining position that wins by making an
	* irreversible move, then its a winning postion no matter how
	* we got here.  */
       ((bestscore>cur.beta)&&(push_move_test(&cur,local_best_move)==1)) 
       )
      {
      use_hash=1;
      }

    put_hash_entry( &cur, 
		    depth, 
		    old_alpha, 
		    cur.beta, 
		    bestscore, 
		    local_best_move,
		    use_hash );
#endif

    return( bestscore );  
}



int  init_open( position *p )
{
     int  i; 
     int  j; 

     for (i=0; i<BD_SIZE; i++)
     for (j=0; j<BD_SIZE; j++)
     {
	  CLR_BD(p,i,j);
     }


     p->ply_of_game = 0;
     p->key = 0ull;

     /* Initialize piece counts */
     for (i = 0; i < BD_SIZE; i++)
       {
	 p->nrank[ i ][ MT ] = BD_SIZE;
	 p->nrank[ i ][ X ] = p->nrank[ i ][ O ] = 0;

	 p->nfile[ i ][ MT ] = BD_SIZE;
	 p->nfile[ i ][ X ] = p->nfile[ i ][ O ] = 0;
       }

     p->npc[ MT ] = BD_SIZE * BD_SIZE;
     p->npc[ X ] = p->npc[ O ] = 0;
     
     p->ctr_pts[ MT ] = p->ctr_pts[ X ] = p->ctr_pts[ O ] = 0;
	
     return 0;
}

void enter_repeat_hash(position *p)
{
     int hash_index = p->key & (REPEAT_HASH_SIZE - 1);
     struct repeat_hash_entry *new = malloc(sizeof (struct repeat_hash_entry));

     new->next = repeat_hash_table[hash_index];
     new->key = p->key;
     repeat_hash_table[hash_index] = new;
}

static int lookup_repeat_hash(u64 key)
{
     int hash_index = key & (REPEAT_HASH_SIZE - 1);
     struct repeat_hash_entry *p;

     for (p = repeat_hash_table[hash_index]; p; p = p->next) {
	  if (key == p->key)
	       return 1;
     }
     return 0;
}

position  * read_moves( position *p )
{
  char ch;
  int pos, dir;
  int size;


  scanf( " %d", &size );

  if (size != BD_SIZE) 
  { 
       fprintf(stderr, "Board size mismatch\n"); 
       exit(1); 
  }


  while (scanf( " %c%d", &ch, &pos ) == 2)
    {
      switch (ch)
	{
	case 'L': dir = L; break;
	case 'R': dir = R; break;
	case 'T': dir = T; break;
	case 'B': dir = B; break;
	default: 
	  fprintf(stderr, "\n Warning! Bad direction %c\n", ch); 
	  dir = L;
	  break;
	}

      make_move( p, p+1,  ((pos - 1) << 2) + dir );
      p++;
      enter_repeat_hash(p);
    }

  /* truncate history here */
  p->his[0] = NULL;
  p->his[1] = NULL;
  return p;
}



/* get proper output notation into s */
int notate( char *s, int mv )
{
     char  buf[8];
     
     switch( mv & 3 )
     {
	 case T : strcpy(s, "T" ); break;
	 case R : strcpy(s, "R" ); break;
	 case L : strcpy(s, "L" ); break;
	 case B : strcpy(s, "B" ); break;
     }
     
     sprintf( buf, "%d", (mv >> 2) + 1 );
     strcat(s, buf);
     
     return 0;
}



/* return an absolute wall time counter in milliseconds  */
u64 new_wall_time(){
  struct timeval t;
  struct timezone tz;
  u64 result;

  gettimeofday(&t,&tz);

  result = 1000 * (u64) t.tv_sec;
  result += ((u64) t.tv_usec)/1000;

  return(result);
}

/* return an absolute process time (user+system) counter in milliseconds  */
u64 new_process_time(){
  struct rusage ru;
  u64 result;

  getrusage(RUSAGE_SELF,&ru);

  result  = 1000 * (u64) ru.ru_utime.tv_sec;
  result += ((u64) ru.ru_utime.tv_usec)/1000;
  result += 1000 * (u64) ru.ru_stime.tv_sec;
  result += ((u64) ru.ru_stime.tv_usec)/1000;

  return(result);
}



double  seconds()
{

#if 1
     return( ((double)new_wall_time())/1000);
#else
    return( ((double)new_process_time())/1000); 
#endif

}



void  put_hash_entry( 
  position *p,
  int depth, 
  int alpha, 
  int beta, 
  int score, 
  int bestmove,
  int use_score )
{
  unsigned long address;

  address = (unsigned long) (p->key & TT_MASK);
  address |= 1;
  address ^=  p->ply_of_game & 1;   /* fix up color */

  /* overwrite if same position, or if greater quality than exisiting entry */

  if (tt[address].verify==p->key || tt[address].quality <= depth )
  {
    tt[address].verify = p->key;
    tt[address].score = score;

    if (!use_score)
	 tt[address].quality = -INF;
    else
	 tt[address].quality = depth;

    tt[address].move = bestmove;
    
    if (score >= beta) tt[address].bound = LOWER_BOUND;
    else
       if (score <= alpha) tt[address].bound = UPPER_BOUND;
       else
	  tt[address].bound = EXACT_SCORE;
  }

  return;
}


int  get_hash_entry( 
  position *p,
  int depth, 
  int alpha, 
  int beta, 
  int *bestmove,
  int *score
 )
{
  unsigned long address;

  address = (unsigned long) (p->key & TT_MASK);
  address |= 1;
  address ^=  p->ply_of_game & 1;   /* fix up color */

  *bestmove = INF;


  if ( tt[address].verify == p->key )
  {
    *bestmove = tt[address].move;

    if ( (tt[address].quality >= depth) &&
	 ((tt[address].quality & 1) == (depth & 1))
	 )
    {
      switch( tt[address].bound )
      {
	case EXACT_SCORE :
	  *score = tt[address].score;
	  return 1;
	  break;
	  
	case LOWER_BOUND :
	  if ( tt[address].score >= beta )
	  {
	    *score = tt[address].score;
	    return 1;
	  }  
	  break;
	  
	case UPPER_BOUND :
	  if ( tt[address].score <= alpha )
	  {
	    *score = tt[address].score;
	    return 1;
	  }
	  break;
      }
    }
  }
  return 0;
}



void  init_hash_table()
{
  int   i;

  for (i=0; i<TT_SIZE; i++) 
  {
     tt[i].quality = -128;
     tt[i].verify = 0ull;
     tt[i].move = 0;
     tt[i].score = 0;
     tt[i].bound = 0;
  }

  return;
}


int least_win_depth( position *p )
{
  int i;
  int  ctm = CTM(p);
  int max_frank = -1;
  
  for (i=0; i<BD_SIZE; i++)
  {
    if (p->nrank[i][ctm] > max_frank)
	 max_frank = p->nrank[i][ctm];
    if (p->nfile[i][ctm] > max_frank)
	 max_frank = p->nfile[i][ctm];
  }

  return BD_SIZE - max_frank;

}


